作业一：
完成”刘亦菲找媒婆”案例
接口(协议)：约会方法
委托者：刘亦菲
代理对象：媒婆
使用动态代理的方式完成”刘亦菲找媒婆”案例

作业二：
使用动态代理方式
 对List接口进行代理，以前的remove(Object obj)方法是删除集合中第一次出现的元素(比如集合中有多个“abc”,调用remove(“abc”)后只会删除一个元素)。
 代理后，要求在调用remove(Object obj)方法后，能够删除集合中所有匹配的元素。【动态代理】


作业三：抄写下面的笔记(抄在本子上)
什么是代理模式：
为什么要有“代理”？生活中就有很多代理的例子，例如，我现在需要出国，但是我不愿意自己去办签证、预定机票和酒店（觉得麻烦 ，那么就可以找旅行社去帮我办，这时候旅行社就是代理，而我自己就是被代理了)。

代理模式的定义：委托者没有能力或者不愿意去完成某件事情，那么就需要找个人代替自己去完成这件事,这个人就是代理者,
所以代理模式包含了3个角色: 委托者    代理角色    接口(协议)
接口(协议)：委托者需要代理的方法定义再这里，然后让代理者和委托者去实现
委托者实现：为了确保和代理者实现的方法一致
代理者实现：为了增强委托者的这些方法

静态代理：
由程序员创建或特定工具自动生成源代码，再对其编译。在程序运行前，代理类的.class文件就已经存在了
动态代理：
- 概述 : JDK的动态代理，只能针对实现了的接口的类，在程序运行过程中，运用反射机制动态创建class字节码，直接产生代理对象
- 动态代理的获取:
  	jdk的Proxy类提供一个静态方法newProxyInstance直接生成代理对象

动态代理相关api介绍
Java.lang.reflect.Proxy类可以直接生成一个代理对象
- Proxy.newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)生成一个代理对象
  - 参数1:ClassLoader loader 被代理对象的类加载器
  - 参数2:Class<?>[] interfaces 被代理对象的要实现的接口
  - 参数3:InvocationHandler h (接口)执行处理接口
  - 返回值: 代理对象
  - 前2个参数是为了帮助在jvm内部生成被代理对象的代理对象,第3个参数,用来监听代理对象调用方法,帮助我们调用方法

- InvocationHandler中的Object invoke(Object proxy, Method method, Object[] args)方法：调用代理类的任何方法，此方法都会执行
  - 参数1:代理对象(慎用)
  - 参数2:当前执行的方法
  - 参数3:当前执行的方法运行时传递过来的参数
    返回值:当前方法执行的返回值

